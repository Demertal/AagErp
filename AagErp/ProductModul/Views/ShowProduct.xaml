<UserControl x:Class="ProductModul.Views.ShowProduct"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:customcontrollibrary="clr-namespace:CustomControlLibrary;assembly=CustomControlLibrary"
             xmlns:prism="http://prismlibrary.com/"
             xmlns:converters="clr-namespace:CustomControlLibrary.Converters;assembly=CustomControlLibrary"
             xmlns:models="clr-namespace:ModelModul.Models;assembly=ModelModul"
             xmlns:viewModels="clr-namespace:ProductModul.ViewModels"
             xmlns:local="clr-namespace:ProductModul.Views"
             prism:ViewModelLocator.AutoWireViewModel="True"
             mc:Ignorable="d" 
             VerticalAlignment="Top" VerticalContentAlignment="Top" HorizontalContentAlignment="Left" HorizontalAlignment="Left" Padding="10,5,5,10">

    <UserControl.Resources>
        <converters:VisibilityBoolConverter x:Key="VisibilityConverterForBool"/>

        <!--<ContextMenu x:Key="DataGridMenu" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}"
                     Visibility="{Binding IsAddPurchase, ConverterParameter=True, Converter={StaticResource VisibilityConverterForBool}}">
            <MenuItem Header="Добавить товар" Command="{Binding AddProductCommand}"/>
        </ContextMenu>-->

        <ContextMenu x:Key="DataGridMenu" Visibility="{Binding IsAddPurchase, ConverterParameter=True, Converter={StaticResource VisibilityConverterForBool}}">
            <MenuItem Header="Добавить товар" Command="{Binding AddProductCommand}"/>
        </ContextMenu>

        <!--<ContextMenu  x:Key="RowMenu" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}"
                      Visibility="{Binding DataContext.IsAddPurchase, ConverterParameter=True, Converter={StaticResource VisibilityConverterForBool}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}, Mode=FindAncestor}}">
            <MenuItem Header="Удалить" CommandParameter="{Binding}" Command="{Binding DataContext.DeleteProductCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}, Mode=FindAncestor}}"/>
            <MenuItem Header="Добавить товар" Command="{Binding DataContext.AddProductCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
        </ContextMenu>-->

        <ContextMenu  x:Key="RowMenu" Visibility="{Binding DataContext.IsAddPurchase, ConverterParameter=True, Converter={StaticResource VisibilityConverterForBool}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}, Mode=FindAncestor}}">
            <MenuItem Header="Удалить" CommandParameter="{Binding}" Command="{Binding DataContext.DeleteProductCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ShowProduct}}}"/>
            <MenuItem Header="Добавить товар" Command="{Binding DataContext.AddProductCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ShowProduct}}}"/>
        </ContextMenu>

        <!--<ContextMenu x:Key="TreeViewContex" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}"
                     Visibility="{Binding IsAddPurchase, ConverterParameter=True, Converter={StaticResource VisibilityConverterForBool}}">
            <MenuItem Header="Добавить категорию" Command="{Binding AddCategoryCommand}"/>
        </ContextMenu>-->

        <ContextMenu x:Key="TreeViewContex" Visibility="{Binding IsAddPurchase, ConverterParameter=True, Converter={StaticResource VisibilityConverterForBool}}">
            <MenuItem Header="Добавить категорию" Command="{Binding AddCategoryCommand}"/>
        </ContextMenu>
    </UserControl.Resources>

    <d:DataContext>
        <viewModels:ShowProductViewModel/>
    </d:DataContext>

    <StackPanel HorizontalAlignment="Left" VerticalAlignment="Top">
        <customcontrollibrary:WatermarkTextBox WatermarkText="Поиск..." Text="{Binding FindString, UpdateSourceTrigger=PropertyChanged}" Margin ="5" Padding="0,0,5,0" HorizontalAlignment="Left"
                                               TextWrapping="Wrap" VerticalAlignment="Center" MinWidth="200" VerticalContentAlignment="Center"/>
        <StackPanel Orientation="Horizontal">
            <TreeView ItemsSource="{Binding CategoriesList, UpdateSourceTrigger=PropertyChanged}">
                <TreeView.Resources>
                    <customcontrollibrary:BindingProxy x:Key="CategoryCommandProxy" Data="{Binding}" CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type customcontrollibrary:ExtendedTreeView}}}" />
                    <ContextMenu DataContext="{Binding Data, Source={StaticResource CategoryCommandProxy}}" x:Key="TreeViewContextNode"
                                 Visibility="{Binding IsAddPurchase, ConverterParameter=True, Converter={StaticResource VisibilityConverterForBool}}">
                        <MenuItem Header="Просмотреть свойства" Command="{Binding ShowPropertiesCommand}" CommandParameter="{Binding CommandParameter, Source={StaticResource CategoryCommandProxy}}"/>
                        <MenuItem Header="Переименовать" Command="{Binding RenameCategoryCommand}" CommandParameter="{Binding CommandParameter, Source={StaticResource CategoryCommandProxy}}"/>
                        <MenuItem Header="Удалить" Command="{Binding DeleteCategoryCommand}" CommandParameter="{Binding CommandParameter, Source={StaticResource CategoryCommandProxy}}"/>
                        <MenuItem Header="Добавить категорию" Command="{Binding AddCategoryCommand}" CommandParameter="{Binding CommandParameter, Source={StaticResource CategoryCommandProxy}}"/>
                    </ContextMenu>
                </TreeView.Resources>
                <TreeView.ContextMenu>
                    <StaticResource ResourceKey="TreeViewContex"/>
                </TreeView.ContextMenu>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectedItemChanged">
                        <i:InvokeCommandAction Command="{Binding SelectedCategoryCommand}"
                                               CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type customcontrollibrary:ExtendedTreeView}}}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding ChildCategories}" DataType="{x:Type models:Category}" >
                        <TextBlock Text="{Binding Title, UpdateSourceTrigger=PropertyChanged}" ContextMenu="{StaticResource TreeViewContextNode}" AllowDrop="True"/>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>
            <DataGrid x:Name="ProductData" ContextMenu="{StaticResource DataGridMenu}" ItemsSource="{Binding ProductsList, UpdateSourceTrigger=PropertyChanged}" AutoGenerateColumns="False"
                          MaxWidth="800" MinHeight="200" MaxHeight="500" SelectionMode="Single">
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                        <Setter Property="ContextMenu" Value="{StaticResource RowMenu}" />
                    </Style>
                </DataGrid.RowStyle>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <prism:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Path=DataContext.AddCommandPurchaseGoods}" CommandParameter="{Binding ElementName=ProductData, Path=SelectedItem}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Наименование" Binding="{Binding Title, UpdateSourceTrigger=PropertyChanged}" MaxWidth="200" IsReadOnly="True" ElementStyle="{StaticResource {x:Type TextBlock}}"/>
                    <DataGridTextColumn Header="Артикул" Binding="{Binding VendorCode, UpdateSourceTrigger=PropertyChanged}" MaxWidth="200" IsReadOnly="True" ElementStyle="{StaticResource {x:Type TextBlock}}"  Visibility="Collapsed"/>
                    <DataGridTextColumn Header="Штрихкод" Binding="{Binding Barcode, UpdateSourceTrigger=PropertyChanged}" MaxWidth="200"  IsReadOnly="True" Visibility="Collapsed"/>
                    <DataGridComboBoxColumn Header="Ед. хр." DisplayMemberPath="Title" CanUserResize="False" Visibility="Visible" SelectedValuePath="Id" IsReadOnly="True"
                                                 SelectedValueBinding="{Binding IdUnitStorage, RelativeSource={RelativeSource PreviousData}}">
                        <DataGridComboBoxColumn.ElementStyle>
                            <Style TargetType="{x:Type ComboBox}">
                                <Setter Property="ItemsSource" Value="{Binding DataContext.UnitStoragesList, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ShowProduct}}}" />
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                            </Style>
                        </DataGridComboBoxColumn.ElementStyle>
                    </DataGridComboBoxColumn>
                    <DataGridComboBoxColumn Header="Гарантия" DisplayMemberPath="Period" CanUserResize="False" Visibility="Visible" SelectedValuePath="Id"
                                                SelectedValueBinding="{Binding IdWarrantyPeriod, RelativeSource={RelativeSource PreviousData}}" IsReadOnly="True">
                        <DataGridComboBoxColumn.ElementStyle>
                            <Style TargetType="{x:Type ComboBox}">
                                <Setter Property="ItemsSource" Value="{Binding DataContext.WarrantyPeriodsList, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ShowProduct}}}" />
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                            </Style>
                        </DataGridComboBoxColumn.ElementStyle>
                    </DataGridComboBoxColumn>
                    <DataGridTextColumn Header="Цена" Binding="{Binding Price, ConverterCulture=ua-UA, StringFormat=C, UpdateSourceTrigger=PropertyChanged}"  IsReadOnly="True" ElementStyle="{StaticResource {x:Type TextBlock}}"/>
                    <DataGridTextColumn Header="Остаток" Binding="{Binding Count, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" ElementStyle="{StaticResource {x:Type TextBlock}}"/>
                </DataGrid.Columns>
            </DataGrid>
            <ContentControl prism:RegionManager.RegionName="ProductInfo" prism:RegionManager.RegionContext="{Binding SelectedItem, ElementName=ProductData}"/>
        </StackPanel>
    </StackPanel>
</UserControl>